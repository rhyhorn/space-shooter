(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/// <reference path="../../../default/typescript/typescriptAPI/TypeScriptAPIPlugin.d.ts" />

SupCore.system.registerPlugin("typescriptAPI", "socketio", {
    defs: "// Type definitions for socket.io-client 1.2.0\r\n// Project: http://socket.io/\r\n// Definitions by: PROGRE <https://github.com/progre/>\r\n// Definitions: https://github.com/borisyankov/DefinitelyTyped\r\n\r\ndeclare var io: SocketIOClientStatic;\r\n\r\ndeclare module 'socket.io-client' {\r\n    export = io;\r\n}\r\n\r\ninterface SocketIOClientStatic {\r\n    (host: string, details?: any): SocketIOClient.Socket;\r\n    (details?: any): SocketIOClient.Socket;\r\n    connect(host: string, details?: any): SocketIOClient.Socket;\r\n    connect(details?: any): SocketIOClient.Socket;\r\n    protocol: number;\r\n    Socket: { new (...args: any[]): SocketIOClient.Socket };\r\n    Manager: SocketIOClient.ManagerStatic;\r\n}\r\n\r\ndeclare module SocketIOClient {\r\n    interface Socket {\r\n        on(event: string, fn: Function): Socket;\r\n        once(event: string, fn: Function): Socket;\r\n        off(event?: string, fn?: Function): Socket;\r\n        emit(event: string, ...args: any[]): Socket;\r\n        listeners(event: string): Function[];\r\n        hasListeners(event: string): boolean;\r\n        connected: boolean;\r\n    }\r\n\r\n    interface ManagerStatic {\r\n        (url: string, opts: any): SocketIOClient.Manager;\r\n        new (url: string, opts: any): SocketIOClient.Manager;\r\n    }\r\n\r\n    interface Manager {\r\n        reconnection(v: boolean): Manager;\r\n        reconnectionAttempts(v: boolean): Manager;\r\n        reconnectionDelay(v: boolean): Manager;\r\n        reconnectionDelayMax(v: boolean): Manager;\r\n        timeout(v: boolean): Manager;\r\n    }\r\n}\r\n",
    code: "",
});

},{}]},{},[1]);
